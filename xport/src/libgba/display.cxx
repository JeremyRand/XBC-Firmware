#include "display.h"
#include "regbits.h"
#include "palette.h"
#include <string.h>
#include <stdlib.h>

// Forward declare the array containing the data to construct the
// font.  The data is included at the bottom of the file
extern const unsigned char g_fontTiles[];

////////////////////////////////////////////////////////////////////////
// CDisplay

// Setup static to hold onto font and palette currently in use
CDispFont const *CDisplay::m_currFont = NULL;
CPalette const *CDisplay::m_currPalette = NULL;

void 
CDisplay::SetCurrDispFont(CDispFont const *font) 
{
  m_currFont = font;
  if(m_currFont!=NULL) {
    m_currFont->WriteToGBA();
  }
}

CDispFont const *
CDisplay::GetCurrDispFont() 
{
  return(m_currFont);
}

void 
CDisplay::SetCurrPalette(CPalette const *palette) 
{
  m_currPalette = palette;
  if(m_currPalette!=NULL) {
    m_currPalette->WriteToGBA();
  }
}

CPalette const *
CDisplay::GetCurrPalette() 
{
  return(m_currPalette);
}

/////////////////////////////////////////////////////////////////////////
// Create a tile set from already existing data, such as that
// generated by gfx2gba.  This memory will not be altered (meaning
// that SetTile will fail) and will not be freed on destruct.
CTileSet::CTileSet(unsigned short charBaseBlock, int nTiles, 
		   unsigned short const *data) :
  m_charBaseBlock(charBaseBlock), m_nTiles(nTiles), m_ownsStorage(false)
{
  m_data = (unsigned short *)data;
}

// Create a tile set to be dynamically modified.  This can be
// dynamically altered (meaning that SetTile will succeed) and the
// data will be freed on destruct.
CTileSet::CTileSet(unsigned short charBaseBlock, int nTiles) :
  m_charBaseBlock(charBaseBlock), m_nTiles(nTiles), m_ownsStorage(false)
{
  m_data = (unsigned short *)malloc(nTiles*GBA_TILE_WORD_SIZE*
				    sizeof(unsigned short));
}

CTileSet::~CTileSet()
{
  if(m_ownsStorage) delete m_data;
}

// This copies the tile set into the GBA Display RAM.  This may have
// wait for display vsync, so it can potentially take a while...
// TODO: Does it really matter about vsync?  If so fix this.  Also
// consider using DMA
void 
CTileSet::WriteToGBA() const
{
  unsigned short *addr = GetGBABaseAddr();
  memcpy(addr, m_data, 
	 m_nTiles*GBA_TILE_WORD_SIZE*sizeof(unsigned short));
//   (GBA_BASE_VRAM)[0] = (unsigned short)(((unsigned int)addr)>>16);
//   (GBA_BASE_VRAM)[1] = (unsigned short)(((unsigned int)addr)&0xffff);
//   (GBA_BASE_VRAM)[2] = (unsigned short)(((unsigned int)m_data)>>16);
//   (GBA_BASE_VRAM)[3] = (unsigned short)(((unsigned int)m_data)&0xffff);
}

/////////////////////////////////////////////////////////////////////////
CDispFont::CDispFont(unsigned char charBaseBlock, const CPalette &palette) :
  CTileSet(charBaseBlock, 256), m_palette(palette) 
{
  SetupTileData();
}

CDispFont::~CDispFont()
{
}

void 
CDispFont::SetupTileData()
{
	unsigned char bgColor = m_palette.GetTextBgIndex();
	unsigned char textColor = m_palette.GetTextFgIndex();
	//  unsigned char bgColor = 253;
	//unsigned char textColor = 254;
	unsigned char temp8; 
	int i, j, offset, reverse;

	for(i=32; i<128+32; ++i)
	{
		if(i > 127)
		{
			offset = GetTileOffset(i-32);
			for (j=0; j<8; ++j)
			{
				m_data[offset+j*4+0] = (unsigned short)0x0;
				m_data[offset+j*4+1] = (unsigned short)0x0;
				m_data[offset+j*4+2] = (unsigned short)0x0;
				m_data[offset+j*4+3] = (unsigned short)0x0;
			}
			continue;
		}
		for (j=0; j<8; ++j)
		{
			temp8 = g_fontTiles[(i-32)*8 + j];
			for(reverse=0; reverse<2; reverse++)
			{
				if(reverse==0)
				{
					bgColor = m_palette.GetTextBgIndex();
					textColor = m_palette.GetTextFgIndex();
				}
				else
				{
					bgColor = m_palette.GetTextFgIndex();
					textColor = m_palette.GetTextBgIndex();
				}
				offset = AsciiToTileOffset(i, reverse>0);
				m_data[offset+j*4+0] = ((temp8&0x80)?textColor:bgColor) | ((temp8&0x40)?textColor<<8:bgColor<<8);
				m_data[offset+j*4+1] = ((temp8&0x20)?textColor:bgColor) | ((temp8&0x10)?textColor<<8:bgColor<<8);
				m_data[offset+j*4+2] = ((temp8&0x08)?textColor:bgColor) | ((temp8&0x04)?textColor<<8:bgColor<<8);
				m_data[offset+j*4+3] = ((temp8&0x02)?textColor:bgColor) | ((temp8&0x01)?textColor<<8:bgColor<<8);
			}
		}
	}
//   m_data[4]=0xdead;
//   m_data[5]=0xf00d;
//   m_data[6]=textColor;
//   m_data[7]=bgColor;
//   m_data[8] = (unsigned short)(((unsigned int)(&m_palette))>>16);
//   m_data[9] = (unsigned short)(((unsigned int)(&m_palette))&0xffff);
}


// CFontUser::CFontUser()
// {
// }

// CFontUser::~CFontUser()
// {
// }

// void CFontUser::LoadFonts()
// {
// 	unsigned short* fontBaseBlock = ((unsigned short*)(0x6004000)); 
// 	int i, j;
// 	//Load Font
// 	for (i=0; i<32*32; i++)
// 	{
// 		fontBaseBlock[i] = 0;
// 	}
// 	g_BackgroundPalette[253] = 0x0;
// 	g_BackgroundPalette[254] = 0xffff;
// 	unsigned char bgColor = 254;
// 	unsigned char textColor = 253;
// 	unsigned char temp8; 

// 	for(i=32; i<128; ++i)
// 	{
// 		for (j=0; j<8; ++j)
// 		{
// 			temp8 = g_fontTiles[(i-32)*8 + j];
// 			fontBaseBlock[i*32+j*4+0] = ((temp8&0x80)?textColor:bgColor) | ((temp8&0x40)?textColor<<8:bgColor<<8);
// 			fontBaseBlock[i*32+j*4+1] = ((temp8&0x20)?textColor:bgColor) | ((temp8&0x10)?textColor<<8:bgColor<<8);
// 			fontBaseBlock[i*32+j*4+2] = ((temp8&0x08)?textColor:bgColor) | ((temp8&0x04)?textColor<<8:bgColor<<8);
// 			fontBaseBlock[i*32+j*4+3] = ((temp8&0x02)?textColor:bgColor) | ((temp8&0x01)?textColor<<8:bgColor<<8);
// 		}
// 	}
// 	++textColor;
// 	--bgColor;
// 	for(i=128+32; i<256; i++)
// 	{
// 		for (j=0; j<8; j++)
// 		{
// 			temp8 = g_fontTiles[(i-128-32)*8 + j];
// 			fontBaseBlock[i*32+j*4+0] = ((temp8&0x80)?textColor:bgColor) | ((temp8&0x40)?textColor<<8:bgColor<<8);
// 			fontBaseBlock[i*32+j*4+1] = ((temp8&0x20)?textColor:bgColor) | ((temp8&0x10)?textColor<<8:bgColor<<8);
// 			fontBaseBlock[i*32+j*4+2] = ((temp8&0x08)?textColor:bgColor) | ((temp8&0x04)?textColor<<8:bgColor<<8);
// 			fontBaseBlock[i*32+j*4+3] = ((temp8&0x02)?textColor:bgColor) | ((temp8&0x01)?textColor<<8:bgColor<<8);
// 		}
// 	}
// 	m_areFontsLoaded = true;
// }


const unsigned char g_fontTiles[]=
{	
/* 32 */	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
/* 33 */	0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x10, 0x00,
/* 34 */	0x28, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
/* 35 */	0x28, 0x28, 0xfe, 0x28, 0xfe, 0x28, 0x28, 0x00,
/* 36 */	0x10, 0x7c, 0x80, 0x7c, 0x02, 0x7c, 0x10, 0x00,
/* 36 */	0xc2, 0xc4, 0x08, 0x10, 0x20, 0x46, 0x86, 0x00,
/* 38 */	0x60, 0x90, 0x60, 0x90, 0x88, 0x84, 0x7a, 0x00,
/* 39 */	0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
/* 40 */	0x08, 0x10, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00,
/* 41 */	0x20, 0x10, 0x08, 0x08, 0x08, 0x10, 0x20, 0x00,
/* 42 */	0x44, 0x28, 0x10, 0xfe, 0x10, 0x28, 0x44, 0x00,
/* 43 */	0x00, 0x10, 0x10, 0x7c, 0x10, 0x10, 0x00, 0x00,
/* 44 */	0x00, 0x00, 0x00, 0x00, 0x18, 0x08, 0x10, 0x00,
/* 45 */	0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00,
/* 46 */	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
/* 47 */	0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00,
/* 48 */	0x7c, 0x86, 0x8a, 0x92, 0xa2, 0xc2, 0x7c, 0x00,
/* 49 */	0x10, 0x30, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00,
/* 50 */	0x7c, 0x82, 0x04, 0x08, 0x10, 0x20, 0xfe, 0x00,
/* 51 */	0x7c, 0x82, 0x02, 0x3c, 0x02, 0x82, 0x7c, 0x00,
/* 52 */	0x40, 0x40, 0x84, 0x84, 0xfe, 0x04, 0x04, 0x00,
/* 53 */	0xfe, 0x80, 0x80, 0xfc, 0x02, 0x82, 0x7c, 0x00,
/* 54 */	0x10, 0x20, 0x40, 0xfc, 0x82, 0x82, 0x7c, 0x00,
/* 55 */	0xfe, 0x02, 0x04, 0x08, 0x10, 0x10, 0x10, 0x00,
/* 56 */	0x7c, 0x82, 0x82, 0x7c, 0x82, 0x82, 0x7c, 0x00,
/* 57 */	0x7c, 0x82, 0x82, 0x7e, 0x04, 0x08, 0x10, 0x00,
/* 58 */	0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00,
/* 59 */	0x00, 0x00, 0x10, 0x00, 0x10, 0x10, 0x20, 0x00,
/* 60 */	0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00,
/* 61 */	0x00, 0x00, 0x7c, 0x00, 0x7c, 0x00, 0x00, 0x00,
/* 62 */	0x40, 0x20, 0x10, 0x08, 0x10, 0x20, 0x40, 0x00,
/* 63 */	0x7c, 0x82, 0x04, 0x08, 0x10, 0x00, 0x10, 0x00,
/* 64 */	0x7c, 0x82, 0xbe, 0xa2, 0xbe, 0x80, 0x7e, 0x00,
/* 65 */	0x10, 0x28, 0x44, 0x82, 0xfe, 0x82, 0x82, 0x00,
/* 66 */	0xfc, 0x82, 0x82, 0xfc, 0x82, 0x82, 0xfc, 0x00,
/* 67 */	0x7c, 0x82, 0x80, 0x80, 0x80, 0x82, 0x7c, 0x00,
/* 68 */	0xfc, 0x82, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x00,
/* 69 */	0xfe, 0x80, 0x80, 0xfc, 0x80, 0x80, 0xfe, 0x00,
/* 70 */	0xfe, 0x80, 0x80, 0xfc, 0x80, 0x80, 0x80, 0x00,
/* 71 */	0x7c, 0x82, 0x80, 0x8e, 0x82, 0x82, 0x7e, 0x00,
/* 72 */	0x82, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x00,
/* 73 */	0x38, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00,
/* 64 */	0x02, 0x02, 0x02, 0x02, 0x02, 0x82, 0x7c, 0x00,
/* 75 */	0x82, 0x8c, 0xb0, 0xc0, 0xb0, 0x8c, 0x82, 0x00,
/* 76 */	0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xfe, 0x00,
/* 77 */	0x82, 0xc6, 0xaa, 0x92, 0x82, 0x82, 0x82, 0x00,
/* 78 */	0x82, 0xc2, 0xa2, 0x92, 0x8a, 0x86, 0x82, 0x00,
/* 79 */	0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00,
/* 80 */	0xfc, 0x82, 0x82, 0xfc, 0x80, 0x80, 0x80, 0x00,
/* 81 */	0x7c, 0x82, 0x82, 0x82, 0x82, 0x84, 0x7a, 0x00,
/* 82 */	0xfc, 0x82, 0x82, 0xfc, 0x88, 0x84, 0x82, 0x00,
/* 83 */	0x7c, 0x82, 0x80, 0x7c, 0x02, 0x82, 0x7c, 0x00,
/* 84 */	0xfe, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00,
/* 85 */	0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00,
/* 86 */	0x82, 0x82, 0x82, 0x82, 0x44, 0x28, 0x10, 0x00,
/* 87 */	0x82, 0x82, 0x82, 0x92, 0x92, 0x54, 0x28, 0x00,
/* 88 */	0x82, 0x44, 0x28, 0x10, 0x28, 0x44, 0x82, 0x00,
/* 89 */	0x82, 0x82, 0x44, 0x28, 0x10, 0x10, 0x10, 0x00,
/* 90 */	0xfe, 0x04, 0x08, 0x10, 0x20, 0x40, 0xfe, 0x00,
/* 91 */	0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x00,
/* 92 */	0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00,
/* 93 */	0x38, 0x08, 0x08, 0x08, 0x08, 0x08, 0x38, 0x00,
/* 94 */	0x10, 0x28, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00,
/* 95 */	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00,
/* 96 */	0x20, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
/* 97 */	0x00, 0x00, 0x7e, 0x82, 0x82, 0x86, 0x7a, 0x00,
/* 98 */	0x80, 0x80, 0xfc, 0x82, 0x82, 0x82, 0xfc, 0x00,
/* 99 */	0x00, 0x00, 0x7e, 0x80, 0x80, 0x80, 0x7e, 0x00,
/* 100 */	0x02, 0x02, 0x7e, 0x82, 0x82, 0x82, 0x7e, 0x00,
/* 101 */	0x00, 0x00, 0x7c, 0x82, 0xfe, 0x80, 0x7c, 0x00,
/* 102 */	0x0e, 0x10, 0x7c, 0x10, 0x10, 0x10, 0x10, 0x00,
/* 103 */	0x00, 0x00, 0x7e, 0x82, 0x7e, 0x02, 0x7c, 0x00,
/* 104 */	0x80, 0x80, 0xfc, 0x82, 0x82, 0x82, 0x82, 0x00,
/* 105 */	0x10, 0x00, 0x30, 0x10, 0x10, 0x10, 0x38, 0x00,
/* 106 */	0x08, 0x00, 0x18, 0x08, 0x08, 0x08, 0x70, 0x00,
/* 107 */	0x80, 0x80, 0x86, 0x98, 0xe0, 0x98, 0x86, 0x00,
/* 108 */	0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00,
/* 109 */	0x00, 0x00, 0xec, 0x92, 0x92, 0x92, 0x82, 0x00,
/* 110 */	0x00, 0x00, 0xbc, 0xc2, 0x82, 0x82, 0x82, 0x00,
/* 111 */	0x00, 0x00, 0x7c, 0x82, 0x82, 0x82, 0x7c, 0x00,
/* 112 */	0x00, 0x00, 0xfc, 0x82, 0xfc, 0x80, 0x80, 0x00,
/* 113 */	0x00, 0x00, 0x7e, 0x82, 0x7e, 0x02, 0x02, 0x00,
/* 114 */	0x00, 0x00, 0xbe, 0xc0, 0x80, 0x80, 0x80, 0x00,
/* 115 */	0x00, 0x00, 0x7e, 0x80, 0x7c, 0x02, 0xfc, 0x00,
/* 116 */	0x10, 0x10, 0x7c, 0x10, 0x10, 0x10, 0x0c, 0x00,
/* 117 */	0x00, 0x00, 0x82, 0x82, 0x82, 0x86, 0x7a, 0x00,
/* 118 */	0x00, 0x00, 0x82, 0x82, 0x44, 0x28, 0x10, 0x00,
/* 119 */	0x00, 0x00, 0x92, 0x92, 0x92, 0x92, 0x6c, 0x00,
/* 120 */	0x00, 0x00, 0x82, 0x44, 0x38, 0x44, 0x82, 0x00,
/* 121 */	0x00, 0x00, 0x82, 0x82, 0x7e, 0x02, 0x7c, 0x00,
/* 122 */	0x00, 0x00, 0xfe, 0x0c, 0x30, 0xc0, 0xfe, 0x00,
/* 123 */	0x0c, 0x10, 0x10, 0x20, 0x10, 0x10, 0x0c, 0x00,
/* 124 */	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00,
/* 125 */	0x60, 0x10, 0x10, 0x08, 0x10, 0x10, 0x60, 0x00,
/* 126 */	0x34, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
/* 127 */	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
